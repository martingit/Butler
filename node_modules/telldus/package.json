{
  "name": "telldus",
  "version": "0.0.9",
  "description": "node wrapper for telldus-core, based on telldus-core-js",
  "keywords": [
    "telldus",
    "telldus-core",
    "TellStick",
    "home automation"
  ],
  "author": {
    "name": "Robin Nilsson",
    "email": "robinnilsson@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Hexagon/node-telldus.git"
  },
  "engines": {
    "node": ">= 0.6.19"
  },
  "license": "MIT",
  "main": "./telldus.js",
  "scripts": {
    "install": "node-gyp configure build",
    "test": "mocha --reporter spec"
  },
  "os": [
    "darwin",
    "linux",
    "win32"
  ],
  "devDependencies": {
    "mocha": "~1.21.4",
    "should": "~4.0.4"
  },
  "readme": "telldus - Node bindings for telldus-core\n===\n\nLatest release is 0.0.9, available at npm using ```npm install telldus```\n\n---\n\nInstallation (From source):\n\n_Note that the master branch isn't always top notch. If it doesn't compile, try an older revision or install the stable release_\n\n1. Install telldus-core and development libraries, choose one of the following four procedures.\n\t* Windows, Mac: Install Telldus Center -- go [here](http://download.telldus.se/TellStick/Software/TelldusCenter/) and get the latest version of the appropriate DMG or EXE file and install\n\t* Linux Ubuntu/Debian prebuilt: \n\t\t* Follow general guide at http://developer.telldus.com/wiki/TellStickInstallationUbuntu \n\t\t* Install `telldus-core` and `libtelldus-core-dev`\n\t* Arch Linux prebuilt:\n\t\t* Install `telldus-core`\n\t* Linux source install: http://developer.telldus.com/wiki/TellStickInstallationSource\n2. Clone this project and enter the node-telldus directory ```cd node-telldus```\n3. Install node-gyp ```npm install node-gyp``` \n4. Compile this module ```npm install -g```\n5. Link the module to your project ```cd yourprojectdirectory``` ```npm link telldus```\n\n---\n\nInstallation (From npm):\n\n1. Install telldus-core and development libraries, choose one of the following four procedures.\n\t* Windows, Mac: Install Telldus Center -- go [here](http://download.telldus.se/TellStick/Software/TelldusCenter/) and get the latest version of the appropriate DMG or EXE file and install\n\t* Linux Ubuntu/Debian prebuilt: \n\t\t* Follow general guide at http://developer.telldus.com/wiki/TellStickInstallationUbuntu \n\t\t* Install `telldus-core` library `libtelldus-core-dev`\n\t* Arch Linux prebuilt:\n\t\t* Install `telldus-core`\n\t* Linux source install: http://developer.telldus.com/wiki/TellStickInstallationSource\n2. Install node-gyp ```npm install node-gyp``` \n3. Install this module using npm ```cd yourprojectdirectory``` ```npm install telldus```\n\n---\n\n# Basic Usage\n\nMake sure telldusd is running on the same machine.\n\n```javascript\nvar telldus = require('telldus');\n\ntelldus.getDevices(function(err,devices) {\n  if ( err ) {\n    console.log('Error: ' + err);\n  } else {\n    // A list of all configured devices is returned\n    console.log(devices);\n  }\n});\n```\n\nIf you ever get a returnValue from a method like turnOnSync that is \nnot equal to 0 (TELLDUS_SUCCESS) you could check what type of error\nthat is using telldus.getErrorString.\n\n---\n\nAPI\n===\n\ngetDevices\n----------\n\nReturns an array of device dictionary objects.\nOnly configured devices are returned.\n\nSynchronous version: ```javascript var devices = telldus.getDevicesSync();```\n\nSignature:\n\n```javascript\ntelldus.getDevices(function(err,devices) {\n  if ( err ) {\n    console.log('Error: ' + err);\n  } else {\n    // The list of devices is returned\n    console.log(devices);\n  }\n});\n```\n\n\n```javascript\n[\n  {\n    id: 1,\n    name: 'name from telldus.conf',\n    methods: [ 'TURNON', 'TURNOFF' ],\n    model: 'codeswitch',\n    type: 'DEVICE',\n    status: {status: 'OFF'}\n  },\n  ...\n]\n```\n\n\nturnOn\n------\n\nTurns a configured device ON.\n\nSynchronous version: ```javascript var returnValue = turnOnSync(deviceId);```\n\nSignature:\n\n```javascript\ntelldus.turnOn(deviceId,function(err) {\n  console.log('deviceId is now ON');\n});\n```\n\nSimilar to the command\n\n```bash\ntdtool --on deviceId\n```\n\n\nturnOff\n-------\n\nTurns a configured device OFF.\n\nSynchronous version: ```var returnValue = turnOffSync(deviceId);```\n\nSignature:\n\n```javascript\ntelldus.turnOff(deviceId,function(err) {\n  console.log('Device' + deviceId + ' is now OFF');\n});\n```\n\nSimilar to the command\n\n```bash\ntdtool --off deviceId\n```\n\n\ndim\n---\n\nDims a configured device to a certain level.\n\nSynchronous version: ```javascript var returnValue = dimSync(deviceId,level);```\n\nSignature:\n\n```javascript\ntelldus.dim(deviceId, level,function(err) {\n  console.log('Device ' + deviceId + ' is now dimmed to level ' + level);\n});\n```\n\n\naddRawDeviceEventListener\n-------------------------\n\nAdd a listener for raw device events.\nThis is usefull for scanning for devices not yet configured\n\nSignature:\n\n```javascript\nvar listener = telldus.addRawDeviceEventListener(function(controllerId, data) {\n  console.log('Raw device event: ' + data);\n});\n```\n\n* `controllerId`: id of receiving controller, can identify the TellStick if several exists in the system.\n* `data`: A semicolon separated string with colon separated key / value pairs.\n\n```javascript\n'class:command;protocol:arctech;model:selflearning;house:5804222;unit:2;group:0;method:turnon;'\n```\n\n\naddDeviceEventListener\n----------------------\n\nAdd a listener for device events\n\nSignature:\n\n```javascript\nvar listener = telldus.addDeviceEventListener(function(deviceId, status) {\n  console.log('Device ' + deviceId + ' is now ' + status.name);\n});\n```\n\n* `status`: is an object of the form:\n```\n    {\"status\": \"the status\"}\n```\n\naddSensorEventListener\n----------------------\n\nAdd a listener for sensor events\n\nSignature:\n\n```javascript\nvar listener = telldus.addSensorEventListener(function(deviceId,protocol,model,type,value,timestamp) {\n  console.log('New sensor event received: ',deviceId,protocol,model,type,value,timestamp);\n});\n```\n\n\nremoveEventListener\n-------------------\n\nRemove a previously added listener.\n\nSynchronous version: ```javascript var returnValue = telldus.removeEventListenerSync(listener);```\nSignature:\n\n```javascript\ntelldus.removeEventListener(listener,function(err) {});\n```\n\n\ngetErrorString\n-------------------\n\nGet the string representation of a return value\n\nSynchronous version: ```javascript var errStr = telldus.getErrorStringSync(returnValue);```\n\nSignature:\n\n```javascript\nvar returnValue = telldus.turnOnSync(deviceId);\nif(returnValue > 0) {\n  telldus.getErrorString(returnValue, function (err, errStr) {\n    console.error('turnOn failed for device ' + deviceId + ', error: ' + errStr);\n    process.exit(0);\n  });\n}\n\n```\n\n\n---\n\nLicense and Credits:\n\nThis project is licensed under the MIT license and is forked from telldus-core-js (https://github.com/evilmachina/telldus-core-js) by GitHub user evilmachina. \n\n---\n\nBugs, issues and feature request:\n\nThe sourcecode and bug tracker is hosted on GitHub, https://github.com/Hexagon/node-telldus\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Hexagon/node-telldus/issues"
  },
  "_id": "telldus@0.0.9",
  "_from": "telldus@"
}
